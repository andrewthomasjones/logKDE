// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// logEpanechnikov
double logEpanechnikov(double x);
RcppExport SEXP _logKDE_logEpanechnikov(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logEpanechnikov(x));
    return rcpp_result_gen;
END_RCPP
}
// logGaussian
double logGaussian(double x);
RcppExport SEXP _logKDE_logGaussian(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logGaussian(x));
    return rcpp_result_gen;
END_RCPP
}
// logLaplace
double logLaplace(double x);
RcppExport SEXP _logKDE_logLaplace(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logLaplace(x));
    return rcpp_result_gen;
END_RCPP
}
// logLogistic
double logLogistic(double x);
RcppExport SEXP _logKDE_logLogistic(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logLogistic(x));
    return rcpp_result_gen;
END_RCPP
}
// logTriangular
double logTriangular(double x);
RcppExport SEXP _logKDE_logTriangular(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logTriangular(x));
    return rcpp_result_gen;
END_RCPP
}
// uniform
double uniform(double x);
RcppExport SEXP _logKDE_uniform(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(uniform(x));
    return rcpp_result_gen;
END_RCPP
}
// KDE
double KDE(double x, std::vector<double> xi, double h);
RcppExport SEXP _logKDE_KDE(SEXP xSEXP, SEXP xiSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE(x, xi, h));
    return rcpp_result_gen;
END_RCPP
}
// silverman
double silverman(std::vector<double> x);
RcppExport SEXP _logKDE_silverman(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(silverman(x));
    return rcpp_result_gen;
END_RCPP
}
// logKDE
std::vector<double> logKDE(const std::vector<double>& input, const std::vector<double>& support, double h, std::string method);
RcppExport SEXP _logKDE_logKDE(SEXP inputSEXP, SEXP supportSEXP, SEXP hSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(logKDE(input, support, h, method));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_logKDE_logEpanechnikov", (DL_FUNC) &_logKDE_logEpanechnikov, 1},
    {"_logKDE_logGaussian", (DL_FUNC) &_logKDE_logGaussian, 1},
    {"_logKDE_logLaplace", (DL_FUNC) &_logKDE_logLaplace, 1},
    {"_logKDE_logLogistic", (DL_FUNC) &_logKDE_logLogistic, 1},
    {"_logKDE_logTriangular", (DL_FUNC) &_logKDE_logTriangular, 1},
    {"_logKDE_uniform", (DL_FUNC) &_logKDE_uniform, 1},
    {"_logKDE_KDE", (DL_FUNC) &_logKDE_KDE, 3},
    {"_logKDE_silverman", (DL_FUNC) &_logKDE_silverman, 1},
    {"_logKDE_logKDE", (DL_FUNC) &_logKDE_logKDE, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_logKDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
